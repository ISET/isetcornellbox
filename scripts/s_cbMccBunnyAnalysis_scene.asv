% s_slantedEdge_scene_analysis
%% Initialize ISET and Docker
ieInit;
if ~piDockerExists, piDockerConfig; end

%%
load('CBLens_slantedEdge_scene.mat', 'scene');

scene = sceneSet(scene, 'distance', 0.5);
sceneSz = sceneGet(scene, 'size');
pSize = 1.4e-6;
%%
oi = oiCreate;
oi = oiSet(oi, 'off axis method', 'skip');
oi = oiSet(oi, 'f number', 5);
oi = oiSet(oi, 'optics focal length', 0.00438);

%%
scene = sceneAdjustPixelSize(scene, oi, pSize);
oi = oiCompute(oi, scene);
rect = [263, 263, sceneSz(1), sceneSz(2)];
oi = oiCrop(oi, rect);
%% Load lens vignetting map
fName = 'p4aLensVignette.mat';
load(fName, 'corrMapBNormUpSamp', 'corrMapBNorm');

% Get oi size
oiSz = oiGet(oi, 'size');
% Resize
corrMapBNormRS = imresize(corrMapBNorm, oiSz);
corrMapBNormRSMap = repmat(corrMapBNormRS, [1, 1, 31]);
%{
tmp = oi.data.photons;
scaledData = oi.data.photons .* corrMapBNormRSMap;
diff = tmp - scaledData;
ieNewGraphWin; imagesc(diff(:,:,1));
oi.data.photons = scaledData;
%}

%%
sensor = sensorCreate('IMX363');
sensor = sensorSetSizeToFOV(sensor, [oiGet(oi, 'fov'), oi);
sensor = sensorSet(sensor, 'noise flag', 0);
sensor = sensorSet(sensor, 'exp time', 0.0141 * 3);
wave = sensorGet(sensor, 'wave');
cf = ieReadSpectra('p4aCorrected.mat', wave);
sensor = sensorSet(sensor, 'color filters', cf);
sensor = sensorCompute(sensor, oi);

% Resize
corrMapBNormRS = imresize(corrMapBNorm, sensorGet(sensor, 'size'));
corrMapBNormRSMap = repmat(corrMapBNormRS, [1, 1, 31]);
sensor.data.volts = sensor.data.volts .* corrMapBNormRS;
sensor.data.dv = sensor.data.dv .* corrMapBNormRS;

sensorWindow(sensor);
ieAddObject(sensor);
ip = ipCreate;
ip = ipSet(ip, 'render demosaic only', true);
ip = ipCompute(ip, sensor);
ipWindow(ip);